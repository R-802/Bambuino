# Generated by CMake

if("${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION}" LESS 2.8)
   message(FATAL_ERROR "CMake >= 3.0.0 required")
endif()
if(CMAKE_VERSION VERSION_LESS "3.0.0")
   message(FATAL_ERROR "CMake >= 3.0.0 required")
endif()
cmake_policy(PUSH)
cmake_policy(VERSION 3.0.0...3.29)
#----------------------------------------------------------------
# Generated CMake target import file.
#----------------------------------------------------------------

# Commands may need to know the format version.
set(CMAKE_IMPORT_FILE_VERSION 1)

# Protect against multiple inclusion, which would fail when already imported targets are added once more.
set(_cmake_targets_defined "")
set(_cmake_targets_not_defined "")
set(_cmake_expected_targets "")
foreach(_cmake_expected_target IN ITEMS Slint::Slint Slint::slint_cpp)
  list(APPEND _cmake_expected_targets "${_cmake_expected_target}")
  if(TARGET "${_cmake_expected_target}")
    list(APPEND _cmake_targets_defined "${_cmake_expected_target}")
  else()
    list(APPEND _cmake_targets_not_defined "${_cmake_expected_target}")
  endif()
endforeach()
unset(_cmake_expected_target)
if(_cmake_targets_defined STREQUAL _cmake_expected_targets)
  unset(_cmake_targets_defined)
  unset(_cmake_targets_not_defined)
  unset(_cmake_expected_targets)
  unset(CMAKE_IMPORT_FILE_VERSION)
  cmake_policy(POP)
  return()
endif()
if(NOT _cmake_targets_defined STREQUAL "")
  string(REPLACE ";" ", " _cmake_targets_defined_text "${_cmake_targets_defined}")
  string(REPLACE ";" ", " _cmake_targets_not_defined_text "${_cmake_targets_not_defined}")
  message(FATAL_ERROR "Some (but not all) targets in this export set were already defined.\nTargets Defined: ${_cmake_targets_defined_text}\nTargets not yet defined: ${_cmake_targets_not_defined_text}\n")
endif()
unset(_cmake_targets_defined)
unset(_cmake_targets_not_defined)
unset(_cmake_expected_targets)


# Create imported target Slint::Slint
add_library(Slint::Slint INTERFACE IMPORTED)

set_target_properties(Slint::Slint PROPERTIES
  INTERFACE_COMPILE_FEATURES "cxx_std_20"
  INTERFACE_INCLUDE_DIRECTORIES "C:/Users/shema/Documents/PlatformIO/Projects/Bambuino/build/_deps/slint-build/generated_include;C:/Users/shema/Documents/PlatformIO/Projects/Bambuino/build/_deps/slint-src/api/cpp/include"
  INTERFACE_LINK_LIBRARIES "Slint::slint_cpp"
  SLINT_DISABLED_FEATURES "FREESTANDING;BACKEND_WINIT_X11;BACKEND_WINIT_WAYLAND;RENDERER_SKIA;RENDERER_SKIA_OPENGL;RENDERER_SKIA_VULKAN;RENDERER_SOFTWARE;BACKEND_QT;BACKEND_LINUXKMS;BACKEND_LINUXKMS_NOSEAT;GETTEXT;EXPERIMENTAL;SYSTEM_TESTING"
  SLINT_ENABLED_FEATURES "INTERPRETER;BACKEND_WINIT;RENDERER_FEMTOVG;ACCESSIBILITY;TESTING"
)

# Create imported target Slint::slint_cpp
add_library(Slint::slint_cpp INTERFACE IMPORTED)

set_target_properties(Slint::slint_cpp PROPERTIES
  INTERFACE_LINK_LIBRARIES "slint_cpp-shared"
)

# This file does not depend on other imported targets which have
# been exported from the same project but in a separate export set.

# Commands beyond this point should not need to know the version.
set(CMAKE_IMPORT_FILE_VERSION)
cmake_policy(POP)
